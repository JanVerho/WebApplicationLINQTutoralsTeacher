@page
@model IndexModel
@using System.Linq;
@using System.Diagnostics;

@{
    ViewData["Title"] = "Home page";

    //Class Student in Index.cshtml.cs

    Student[] studentArray = {
            new Student() { StudentID = 1, StudentName = "John", Age = 18 },
            new Student() { StudentID = 2, StudentName = "Steve",  Age = 21 },
            new Student() { StudentID = 3, StudentName = "Bill",  Age = 25 },
            new Student() { StudentID = 4, StudentName = "Ram" , Age = 20 },
            new Student() { StudentID = 5, StudentName = "Ron" , Age = 31 },
            new Student() { StudentID = 6, StudentName = "Chris",  Age = 17 },
            new Student() { StudentID = 7, StudentName = "Rob", Age = 19  }
        };

    IList<string> stringList = new List<string>() {
    "C# Tutorials",
    "VB.NET Tutorials",
    "Learn C++",
    "MVC Tutorials" ,
    "Java"
    };
}

<div class="background">
    <ol>
        <li>
            Example: LINQ Query to Array - where name.Contains('a')

            @{
                // Data source
                string[] names = { "Bill", "Steve", "James", "Mohan", "Jan" };
                string AllElements = "";
                @foreach (string item in names)
                {
                    AllElements += item + " - ";
                }
                <div>(collectie: @AllElements)</div>
                // LINQ Query
                var myLinqQuery = from name in names
                                  where name.Contains('a')
                                  select name;

                // Query execution
                @foreach (var name in myLinqQuery)
                {
                    <p>
                        @name
                    </p>
                }
            }
        </li>

        <li>
            Example: Use for loop to find elements from the collection in C# 1.0
            @{ string AllElem = "";
                @foreach (Student item in studentArray)
                {
                    AllElem += item.StudentName + " - ";
                }
                <div>(collectie: @AllElem)</div>

                Student[] students = new Student[10];

                int i = 0;

                @foreach (Student std in studentArray)
                {
                    @if (std.Age > 12 && std.Age < 20)
                    {
                        students[i] = std;

                        <p>@students[i].StudentName </p>
                        i++;
                    }
                }
            }
        </li>

        <li>
            Example:  LINQ - teenagers in Array
            @{
                Student[] teenAgerStudents = studentArray.Where(stu => stu.Age > 12 && stu.Age < 20).ToArray();

                foreach (Student item in teenAgerStudents)
                {
                    <p>@item.StudentName (@item.Age)</p>

                }
            }
        </li>

        <li>
            Example:  LINQ - Bill in Array
            @{
                Student StuBill = studentArray.Where(stu => stu.StudentName == "Bill").FirstOrDefault();

                <p>@StuBill.StudentName (@StuBill.Age)</p>
            }
        </li>

        <li>
            Example: LINQ <span>Query Syntax</span> in C# - IList - List
            @{// string collection
                // IList<string> stringList = new List<string>()

                // LINQ Query Syntax
                var result = from s in stringList
                             where s.Contains("Tutorials") && s.Contains("C#")
                             select s;

                foreach (var str in result)
                {
                    <p>@str</p>
                }
                <p><a href=" https://www.tutorialsteacher.com/linq/linq-query-syntax">tutorialsteacher.com/linq/linq-query-syntax</a></p>
            }
        </li>

        <li>
            Example: LINQ <span>Method Syntax</span> in C# - IList - List
            @{// string collection
                // IList<string> stringList = new List<string>()

                // LINQ METHOD Syntax
                result = stringList.Where(s => s.Contains("Tutorials") && s.Contains("C#"));

                foreach (var str in result)
                {
                    <p>@str</p>
                }
            }
        </li>

        <li>
            Example: LINQ <span>Query Syntax</span> in C# - IList - List
            @{// Student collection
                IList<Student> studentList = new List<Student>
                        () {
                new Student() { StudentID = 1, StudentName = "John", Age = 13} ,
                new Student() { StudentID = 2, StudentName = "Moin",  Age = 21 } ,
                new Student() { StudentID = 3, StudentName = "Bill",  Age = 18 } ,
                new Student() { StudentID = 4, StudentName = "Ram" , Age = 20} ,
                new Student() { StudentID = 5, StudentName = "Ron" , Age = 15 }
                    };

                // LINQ Query Syntax to find out teenager students
                var teenAgerStudent = from s in studentList
                                      where s.Age > 12 && s.Age < 20
                                      select s;

                // Result
                foreach (var item in teenAgerStudent)
                {
                    <p>@item.StudentName - id: @item.StudentID</p>
                }
                <p><a href=" https://www.tutorialsteacher.com/linq/linq-method-syntax">tutorialsteacher.com/linq/linq-method-syntax</a></p>
            }
        </li>

        <li>
            Example: LINQ <span>Method Syntax</span> in C# - IList - List
            @{// Student collection
                // IList<Student> studentList

                // LINQ METHOD Syntax to find out teenager students
                teenAgerStudent = studentList.Where(s => s.Age > 12 && s.Age < 20).ToList();


                // Result
                foreach (var item in teenAgerStudent)
                {
                    <p>@item.StudentName - id: @item.StudentID</p>
                }
            }
        </li>

        <li>
            Example: <span>Anonymous Method</span> in C# (Delegate)
            @{
                Student stud = new Student() { Age = 25, StudentName = "Delegate" };
                IsTeenAger isTeenAger = delegate (Student s) { return s.Age > 12 && s.Age < 20; };
                <p>@stud.StudentName - @stud.Age -- IsTiener?: @isTeenAger(stud)</p>
            }
        </li>

        <li>
            Example: <span>Anonymous Method</span> in C# (Delegate met Lambda Expression)
            @{
                stud = new Student() { Age = 19, StudentName = "Lambda(delegate)" };
                isTeenAger = s => s.Age > 12 && s.Age < 20; };
            <p>@stud.StudentName - @stud.Age -- IsTiener?: @isTeenAger(stud)</p>
        </li>

        <li>
            Example: <span>Anonymous Method</span> in C# (Lambda Expression with multiple statements: (s, youngAge) => s.Age < youngAge)
            @{
                stud = new Student() { Age = 19, StudentName = "Lambda expression with multiple statements" };
                IsYoungerThan isYoungerThanBool = (s, youngAge) => s.Age < youngAge; };
            <p>@stud.StudentName - @stud.Age -- IsJeugd?: @isYoungerThanBool(stud, 25)</p>
        </li>

        <li>
            @{
                Printing print = () => Debug.Print("This is parameter less lambda expression");
                Debug.Print("****** hello world ******");

                print();
            }
        </li>

    </ol>
</div>

// https://www.tutorialsteacher.com/linq/what-is-linq